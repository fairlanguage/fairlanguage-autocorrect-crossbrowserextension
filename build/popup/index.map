{"version":3,"sources":["../controller/storage.js","index.js"],"names":["StorageController","Promise","resolve","reject","chrome","storage","local","get","settings","Error","mode","toolbar","set","currentHost","window","location","hostname","hosts","find","hostInStorage","name","index","indexOf","enabled","displayVersion","document","getElementById","displaySettings","statusToolbar","buttonToolbar","displayActive","buttonActive","display","statusHosts","buttonResetHosts","getSettings","then","value","JSON","stringify","textContent","catch","error","getCurrentHostSettings","tabs","query","active","currentWindow","currentHostname","URL","url","getHostSettings","getHosts","length","addEventListener","sendMessage","id","command","runtime","onMessage","addListener","undefined","_settings","host","resetAllHosts","manifest","version"],"mappings":"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","file":"index.map","sourceRoot":"..\\..\\src\\popup","sourcesContent":["export default class StorageController {\n\n  constructor() {\n    return 'I controll the storage.';\n  }\n\n  static getSettings() {\n\n    return new Promise((resolve, reject) => {\n\n      chrome.storage.local.get(['settings'], (storage) => {\n\n        if (storage.settings) {\n          resolve(storage.settings);\n        } else {\n          reject(new Error('Reading settings from local storage'));\n        }\n      \n      });\n\n    });\n\n  }\n\n  static setToolbar(mode = 'toggle') {\n\n    return new Promise((resolve, reject) => {\n\n      chrome.storage.local.get(['settings'], (storage) => {\n\n        const settings = storage.settings;\n\n        //console.log(settings)\n\n        settings.toolbar = mode === 'toggle' ? !settings.toolbar : mode;\n\n        //console.log(settings)\n\n        chrome.storage.local.set({ settings: settings }, () => {\n\n          if (settings) {\n            resolve(settings.toolbar);\n          } else {\n            reject(new Error('Writing toolbar settings to local storage'));\n          }\n\n        });\n\n      });\n\n    });\n\n  }\n\n  static getHostSettings(currentHost = window.location.hostname) {\n\n    return new Promise((resolve, reject) => {\n\n      let settings;\n\n      chrome.storage.local.get(['hosts'], (storage) => {\n\n        settings = storage.hosts.find(hostInStorage => hostInStorage.name === currentHost);\n\n        if (settings) resolve(settings);\n\n        reject(new Error('Reading host settings from local storage'));\n      \n      });\n\n    });\n\n  }\n\n  static setHost(mode = 'toggle') {\n\n    const currentHost = window.location.hostname;\n\n    return new Promise((resolve, reject) => {\n\n      chrome.storage.local.get(['hosts'], (storage) => {\n\n        if (storage.hosts) {\n\n        //console.log(storage.hosts);\n\n        const settings = storage.hosts.find(hostInStorage => hostInStorage.name === currentHost);\n\n        //console.log(settings);\n\n        const index =  storage.hosts.indexOf(settings);\n\n        //console.log(index);\n\n        storage.hosts[index].enabled = !storage.hosts[index].enabled; \n\n        //console.log(storage.hosts);\n\n        chrome.storage.local.set({ hosts: storage.hosts }, () => {\n\n          if (settings) resolve(storage.hosts[index]);\n\n        //reject(new Error('Reading host settings from local storage'));\n\n        })\n\n       /*  const settings = storage.hosts.find(hostInStorage => hostInStorage.name === currentHost);\n        \n        const index = hosts.indexOf(settings);\n\n        console.log(hosts[index]);\n\n        hosts[index].enabled = !hosts[index].enabled;\n\n        console.log(hosts[index])\n\n        console.log(hosts); */\n\n        }\n        \n        //console.log(hosts[hosts.indexOf(settings)])\n/* \n        hosts[hosts.indexOf(settings)].enabled = !settings.enabled;\n\n        console.log(hosts[hosts.indexOf(settings)])\n\n        console.log(hosts); */\n        //console.log(hosts)\n\n        /* // Write the invert\n        chrome.storage.local.set({ hosts: hosts }, () => {\n\n          if (settings) resolve(settings);\n\n        reject(new Error('Reading host settings from local storage'));\n\n        }) */\n      \n      });\n\n    });\n  }\n\n  static getHosts() {\n\n    return new Promise((resolve, reject) => {\n\n      chrome.storage.local.get(['hosts'], (storage) => {\n\n        if (storage.hosts) resolve(storage.hosts);\n\n        reject(new Error('Reading host settings from local storage'));\n      \n      });\n\n    });\n\n  }\n\n  static resetAllHosts() {\n\n    return new Promise((resolve, reject) => {\n\n      chrome.storage.local.set({ hosts: [] }, () => {\n\n        resolve(true);\n\n      });\n\n      reject(new Error('No resetting hosts'));\n\n    });\n\n  }\n\n}\n","import * as manifest from '../../manifest.json';\n\nimport StorageController from '../controller/storage';\n\nconst displayVersion = document.getElementById('display-version');\n\nconst displaySettings = document.getElementById('string-settings');\n\nconst statusToolbar = document.getElementById('status-toolbar');\nconst buttonToolbar = document.getElementById('button-toolbar');\n\nconst displayActive = document.getElementById('active-status');\nconst buttonActive = document.getElementById('active-button');\n\nconst display = document.getElementById('display');\n\nconst statusHosts = document.getElementById('status-hosts');\nconst buttonResetHosts = document.getElementById('button-reset-hosts');\n\n/**\n * Storage settings\n */\nconst getSettings = () => {\n  StorageController.getSettings()\n    .then((settings) => {\n      displaySettings.value = JSON.stringify(settings);\n      statusToolbar.textContent = settings.toolbar;\n      buttonToolbar.textContent = settings.toolbar ? 'hide' : 'show';\n    })\n    .catch((error) => {\n      displaySettings.value = (error);\n    });\n};\n\nconst getCurrentHostSettings = () => {\n\n  chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n\n    const currentHostname = new URL(tabs[0].url).hostname;\n\n    StorageController.getHostSettings(currentHostname)\n      .then((settings) => {\n        display.value = JSON.stringify(settings);\n\n        displayActive.textContent = settings.enabled;\n        buttonActive.textContent = settings.enabled ? 'disable' : 'enable';\n\n\n      })\n      .catch((error) => {\n        display.value = (error);\n      });\n\n  });\n\n};\n\nStorageController.getHosts()\n  .then((hosts) => {\n    statusHosts.textContent = 'hosts: '+hosts.length;\n  });\n\ngetSettings();\ngetCurrentHostSettings();\n\n/**\n * Toolbar\n */\nbuttonToolbar.addEventListener('click', () => {\n\n  chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n\n    chrome.tabs.sendMessage(tabs[0].id, { command: 'toolbar' });\n\n  });\n\n});\n\nchrome.runtime.onMessage.addListener((settings) => {\n  if (settings.toolbar === undefined) return;\n  StorageController.getSettings()\n    .then((_settings) => {\n      displaySettings.value = JSON.stringify(_settings);\n      statusToolbar.textContent = _settings.toolbar;\n      buttonToolbar.textContent = _settings.toolbar ? 'hide' : 'show';\n    })\n    .catch((error) => {\n      displaySettings.value = (error);\n    });\n});\n\n/**\n * Hosts\n */\nbuttonActive.addEventListener('click', () => {\n  chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n    chrome.tabs.sendMessage(tabs[0].id, { command: 'host' });\n  });\n});\nchrome.runtime.onMessage.addListener((settings) => {\n  if (settings.host === undefined) return;\n  displayActive.textContent = settings.host.enabled;\n  buttonActive.textContent = settings.host.enabled ? 'disable' : 'enable';\n  display.value = JSON.stringify(settings.host);\n});\n\n/**\n * Reset hosts\n */\nbuttonResetHosts.addEventListener('click', () => {\n  StorageController.resetAllHosts();\n  getCurrentHostSettings();\n});\n\n/**\n * Version\n */\ndisplayVersion.textContent = manifest.version;\n"]}